package d08_생성자_21_0709;

public class Exam1 {
    public static void main(String[] args) {
        // 생성자
        // 1. 정의 : 객체를 new 생성할 때 사용되는 초기화 담당 함수
        // * 초기화 : 초기에 값 대입 : 처음에 로직 처리
        // 1. 클래스명과 생성자명은 무조건 동일한 이름을 갖는다.
        // - 생성자는 함수가 만들어진 다음에 만들어져서 함수랑 같음
        // - 클래스와 이름이 같으면 생성자, 이름이 다르면 메소드!!!
        // 클래스명 변수명 = new 생성자명(): --> 정확히는 이게 맞음!!!
        // 2. 오버로드 : 메소드/생성자는 매개변수의 갯수/타입/순서 [변수명 제외] 가 다르면 동일한 이름으로 여러개 선언 가능!
            // - 넘치게 불러오다!
            // - 변수는 동일한 이름을 가질 수 없다! --->
            // 왜??? -- > 객체의 멤버 변수는 객체마다 따로 할당이 되고, 객체의 메소드는 공유!!!!!
            // - 생성자도 동일한 이름으로 여러개 만들 수 없다. 단! 오버로드는 지원한다.
        // 3. 종류
            // - 기본 생성자 :     생성자명 ){};   == 클래스명( ){};
            // - 사용 --> new 생성자명() -->? 딱 한번
        // 3. 오버라이딩 :
        
        // 1) 기본 생성자 : 클래스명 변수명 = new 클래스명():
        Phone p1 = new Phone();

        // 2) 매개변수가 있는 생성자 : 매개변수를 갖는 생성자를 이용한 객체 생성
        Phone p2 = new Phone("갤럭시", "실버");
        
        // 둘의 객체의 차이는 
        // 생성자 목적!!!!! :  객체 생성시 빠른 멤버변수 초기화
        // 협업에 있어서 규칙적인 값 초기화!
        // 단점 : 규칙에 따른 복잡도 증가, 자유도 감소

        // 3)  생성자의 오버로드
        Phone p3 = new Phone( "아이폰","블루", 100 );

        // 4) 생성자에서 정의되지 않은 매개변수와 순서 불일치는 오류 발생
        // Phone p4 = new Phone(1000, "검정", 122);
//        Phone p5 = new Phone( "아이폰","블루", 100 );
        

    }//main end
}// class end
