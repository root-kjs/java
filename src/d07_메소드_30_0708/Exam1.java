package d07_메소드_30_0708;

public class Exam1 {
    public static void main(String[] args) {
/*
     메소드 : 멤버 함수
     1. 하나의 기능을 수행하는 일련의 코드
     속성은 값을 저장. 메소드는 기능을 담당, 자바는 타입이 가장 중요!
     반환 타입 메소드명( 타입 매개변수1, 타입 매개변수 2 )
     return 반환값 생략이 가능 없으면  void
     -
     1. 메소드명 : 카멜 표기법 권장
     2. 매개변수 : 인수값의 타입과 매개변수의 타입이 일치해야 한다. ! 중요 !
     - 메소드 안으로 들어오는 값을 저장하는 변수
     3. 반환타입 : 메소드 실핼 후 결과를 되돌려 주는 값
     4. 반환값(return)은 항상 자료 1개만 가능하다.
     반환값이 없을때는 void 라는 반환타입 키워드를 사용한다.
     인수값이란 메소드 호출시 메소드에게 전달하는 값
     5. 인수값 <===> 매개변수

     * 메소드를 호출하는 방법
     - 1. 호출하고자 하는 메소드가 다른 클래스이면, 객체가 필수!!!!!
      1) 호출하고자 하는 메소드를 갖는 클래스로 객체 생성

  */
        Calculator cal1 = new Calculator();// 객체 생성
    // 3) 매개변수 X 반환값 O
        cal1.getPI(); // 객체. 메소드명();
        double result = cal1.getPI(); // 반환값이 있을때 주로 변수에 대입한다.
        System.out.println( result );
    // 4) 매개변수 X 반환값 X
        cal1.powerOn();
        // 여러 객체들을 생성했다면 객체마다 멤버변수는 다르다. 주의할 것!
        Calculator cal2 = new Calculator();
        // new 연산자는 항상 새로운 객체를 만든다.
        // 객체마다 멤버 변수와 메소드 다 다르다.

    // 5) 매개변수 O, 반환값 X
        cal1.printSum( 3, 5);
        // powerOn() 메소드를 실행하지 않았기 때문에 시스템이 꺼져 있습니다. 값이 나옴.
        cal2.printSum( 3, 5);


    // 6) 매개변수 O, 반환값 O
    // 리턴값은 변수에 담아서 외부 활용이 가능하다!
        int result2 = cal1.add( 10, 3);
        // 리턴값에 타입 일치시킬 것, 인수에도 타입 일치시킬 것!
        // 자바는 타입맞춤이 중요하다.



    } // main end
} // class end



















